# -*- coding: utf-8 -*-
"""Amrutha  (3).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GsnwX_n1e3KLJNwYsP1de-jDWDcaxeM-
"""

print(hello world)

print('hello world')

c=9.56
print('int c')

d=int(c)
print(d)

c=9+6i
d=int(c)
print(d)

MyPhoneBook={'Name':['Akash','ankitha'],
            'phone':['1234','345'],
            'e-mail':['akash@gmail.com','amruthaaaa@gmail.com']}
print(MyPhoneBook)

a=('list','dictionary','tuple')
print(a)

a=list()

a[2]

a[0:2]

del a[1]

len[a]

a=['am','an','po']

a=['am','an','po']
b=

b=set(a)

b

a

print(a)

del a[0]

a

a*2

c=['1','2']
a.extend(c)

print(a)

a.append(5)

print a

print(a)

a.pop(1)

a.sort()

a.sort()

del a(0,1)

del a[0,1]

del a['po']

del a[0]

del a[0]

print(a)

a.insert(2,10)

print(a)

del a[0]

print(a)

a.insert(1,4)

print(a)

a.sort()

print(a)

m={1,2,3,4,5}
n={4,5,6,7}
print(a|b)

a|b

m={1,2,3,4,5,5}
n={4,5,6,6}
print(a|b)

print(m|n)

mystr="amrutha good girl"
print(mystr)

len(mystr)

mystr.index('r')

mystr.capitalize()

"""    mystr.upper()"""

mystr.upper()

a=3
b=9
print(a+b,a-b,a*b,a/b,a**b,a%b,end=',')

a=int(input("enter a number"))
if(a>3):
    print("true")

if(a>0):
    print("i can calculate root")
    root=a**1/2
    print("sqr root of %d is %f"%(a,root))
print("thanks")

a=int(input("enter a number btw 10 and 20:"))
if a>=10 and a<=20:
    print("the condition has been met")
else:
        print("you did it wrong")

print("welcome to calculator")
a=float(input("enter a number"))
b=float(input("enter other number"))
print("select your option")
print("1. add")
print("2.sub")
print("3.mul")
print("4.div")
option=int(input(""))
if option==1:
    print(a+b)
elif option==2:
        print(a-b)
elif option==3:
        print(a*b)
else :
            print(a/b)

string1 =("amrutha")
string2 =("main")
concatenate_string = string1 +string2
print(concatenate_string)

list =['amrutha','anakha','joel']
print(list)

list=['baselius','rajagiri','svr']
print(list)

list.append('bcm')

print(list)

list.insert(0,"maharajas")

print(list)

del list[2]

print(list)

232

def details(id,name):
 print("id is:",id)
  print("name is:",name)
details(1,"amrutha")

a="romanjam"
print(len(a))

if "nja" in a:
    print("yes")

else:
    print("no")

a[3:5]

hardware =("monitor","ram","hdd")
print(hardware)

if "hdd" in hardware:
    print("yes")
else:
        print("no")

book={'names':['nalini','pathummante aadu'],
    'author':['kumaranasan','vaikkom muhammod basheer']}
print(book)

book["names"]='randamoozham'

print(book)

{'names':'nalini'}

print(book)

book['names']='nalini'

print(book)

class Dog:
    species="canis familaris"
    def __init__(self,name,age,breed):
        self.name=name
        self.age=age
        self.breed=breed
    def speak(self,msg):
        self.msg= msg
        print(self.name,'says',msg)


miles= Dog("miles",4,"doberman")
buddy= Dog("buddy",9,"dachshund")
ruby= Dog("ruby",21,"spits")
mikky= Dog("mikky",21,"stray")

buddy.speak('yooooo')
miles.speak('bowwww')
ruby.speak('vowwww')

print(miles.name,miles.age,miles.breed)
print(ruby.name,ruby.age,ruby.breed)
print(mikky.name,mikky.age,mikky.breed)

class Dog:
    species="canis familaris"
    def __init__(self,name,age,breed):
        self.name=name
        self.age=age
        self.breed=breed
    def speak(self,msg):
        self.msg= msg
        print(self.name,'says',msg)


miles= Dog("miles",4,"doberman")
buddy= Dog("buddy",9,"dachshund")
ruby= Dog("ruby",21,"spits")
mikky= Dog("mikky",21,"stray")

buddy.speak('yooooo')
miles.speak('bowwww')
ruby.speak('vowwww')
print (miles.__dict__,ruby.__dict__,mikky.__dict__)

class Employee():
    def __init__(self,name,age,salary):  #single
        self.name=name
        self.age=age
        self.salary=salary

class Childemployee(Employee):
    def __init__(self,name,age,salary):
        self.name=name
        self.age=age
        self.salary=salary
ob1= Childemployee("loki",10,300)
print(ob1.name,ob1.age,ob1.salary)

class Employee():  #parent
    def __init__(self,name,age,salary):   #hierarchical
        self.name=name
        self.age=age
        self.salary=salary
class Childemp1(Employee): #child1
    def __init__(self,name,age,salary):
        self.name=name
        self.age=age
        self.salary=salary


class Childemp2(Employee):    #child2
    def __init__(self,name,age,salary):
        self.name=name
        self.age=age
        self.salary=salary

class Employee(): #parent1
    def __init__(self,name,age,salary):   #multiple
        self.name=name
        self.age=age
        self.salary=salary
class Employee1(): #parent2
    def __init__(self,name,age,salary,id):
        self.name=name
        self.age=age
        self.salary=salary
        self.id=id


class Childemp2(Employee,Employee1):
    def __init__(self,name,age,salary,id):
        self.name=name
        self.age=age
        self.salary=salary
        self.id=id

"""### 7 th ques"""

def celsius_to_fahrenheit(celsius):
    fahrenheit = (celsius * 9/5) + 32
    return fahrenheit

def fahrenheit_to_celsius(fahrenheit):
    celsius = (fahrenheit - 32) * 5/9
    return celsius

# Conversion from Celsius to Fahrenheit
celsius = float(input("Enter temperature in Celsius: "))
converted_fahrenheit = celsius_to_fahrenheit(celsius)
print(f"{celsius}째C is equal to {converted_fahrenheit}째F")

# Conversion from Fahrenheit to Celsius
fahrenheit = float(input("Enter temperature in Fahrenheit: "))
converted_celsius = fahrenheit_to_celsius(fahrenheit)
print(f"{fahrenheit}째F is equal to {converted_celsius}째C")

def conve_to_fahren(celsius):
    fahrenheit=(celsius*9/5)+32
    return fahrenheit

def conve_to_celsius(fahrenheit):
    celsius=(fahrenheit-32)*5/9
    return celsius

celsius=float(input("enter a number in celsius"))
print("1.covert to fahernheit")
result=conve_to_fahren(celsius)
print(result)


farenheit=float(input("enter a number in fahrenheit"))
print("2.covert to celsius")
result=conve_to_celsius(fahrenheit)
print(result)

def print_pattern(n):
    for i in range(n):
        for j in range(i + 1):
            print("*", end="")
        print()
    for i in range(n, 0, -1):
        for j in range(i):
            print("*", end="")
        print()

rows = 5  # Number of rows in the pattern
print_pattern(rows)

print("enter 3 sides of the triangle")
a=float(input("1st side"))
b=float(input("2st side"))
c=float(input("3st side"))
print(a,b,c)
if a>b and a>c:
    h=a
    k=b**2+c**2

elif b>c:
    h=b
    k=a**2+c**2
else :
    h=c
    k=a**2+b**2

if h**2==k:
    print("right")
else:
    print("no")

"""#### 10. Python program to check whether the given integer is a multiple of both 5 and 7

"""

print("check a number which is multiple of 5 and 7")
k=float(input("enter a number"))
if k%5==0 and k%7==0:
    print("number is multiple of both")

else :
    print("number is not multiple of 7 and 5")

"""###### 11. Python program to display all integers within the range 100-200 whose sum of digits is an even number

"""

def sum_of_digits(n):

    digit_sum = 0
    while n > 0:
        digit_sum += n % 10
        n //= 10
    return digit_sum


# Iterate over the range and check the sum of digits for each number
for num in range(100, 201):
    if sum_of_digits(num) % 2 == 0:
        print(num)

